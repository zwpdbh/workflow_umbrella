# ACStor Playground

## Introduction

This livebook is used to play as REPL for developing ACStor Scenario.
So, start workflow_umbrella project and connect to it as attached node.

```elixir
# Test to see if we could get auth token from workflow_umbrella project.
alias Azure.Auth
Auth.get_auth_token(Auth.azure_scope())
```

* For one scenario such as managed disk, `Worker.Leader` load different settings from a scenario setting service. Such as number of disks, run time. 
  The purpose of this is to generate different settings for each workflow later to use.

* `Worker.Leader` specify how many `Worker` are created. There could be `M` workers for `N` workflows.

* For replication, when `Worker.Leader` assign workflow to `worker`, it need to reset worker's some interal state (such as: AKS cluster name)

* A `Worker` use inital settings got from `Worker.Leader` to run workflow by execute each steps in the workflow.

* After each step is execute by a `Worker`, the state of the `Worker` need to be updated by that step.

Each step is a pure function from Steps.Acstor.Replication module.

* We update a `Worker`'s state by wrapping the pure function in another function.

**Update**

* `Worker` no longer execute workflows, it doesn't know about workflows.
* `Worker` only care about executing a step.
* The concept of workflow which is the sequence of steps is kept only in `Worker.Leader`.

## Scenario Settings

```elixir
symbol = "azure_disk_replication"
```

```elixir
alias Worker.Leader
alias Steps.Acstor.WorkflowConfig

Workflow.stop_scenario(symbol)
Workflow.start_scenario(symbol)
```

<!-- livebook:{"branch_parent_index":1} -->

## Execute replication workflow

```elixir
Kino.Process.render_sup_tree(DynamicSymbolSupervisor)
```

```elixir
# Add workflow to scenario 
azure_disk_workflow_definition =
  WorkflowConfig.azure_disk_replication()
  |> Enum.map(fn function_name ->
    {"Steps.Acstor.Replication", function_name}
  end)

nvme_workflow_definition =
  WorkflowConfig.nvme_replication()
  |> Enum.map(fn function_name ->
    {"Steps.Acstor.Replication", function_name}
  end)

Leader.add_workflows_for_symbol(%{
  symbol: symbol,
  workflows_definition: [
    # azure_disk_workflow_definition,
    nvme_workflow_definition
  ]
})
```

```elixir
Leader.schedule_workflows(symbol)
```

```elixir
Leader.execute_workflows_for_symbol(symbol)
```

```elixir
Leader.current_state(symbol)
# |> Map.get(:workflows_finished)
# |> Enum.map(fn x -> {x.workflow_id, x.workflow_status} end)
```

```elixir
failed_workflow =
  Leader.current_state(symbol)
  |> Map.get(:workflows_finished)
  |> Enum.find(fn %{workflow_id: workflow_id} ->
    workflow_id == "65e8a39c-9da3-4f2c-9f31-1e7aee1f2156"
  end)
```

```elixir
Leader.current_state(symbol)
|> Map.get(:workflows_in_progress)
|> Enum.map(fn {k, v} ->
  if v != nil do
    {k, {v.workflow_id, v.log_file}}
  else
    {k, nil}
  end
end)

# |> Enum.map(fn x -> {x.workflow_id, x.workflow_status} end)
```

```elixir
failed_workflow =
  Leader.current_state(symbol)
  |> Map.get(:workflows_finished)
  |> Enum.find(fn x -> String.contains?(x.log_file, "nb8hqv") end)

Leader.resume_workflow(%{symbol: symbol, workflow_id: failed_workflow.workflow_id})
```

```elixir
Leader.overrite_k8s_config_to_defaul_from_workflow_id(%{
  symbol: symbol,
  workflow_id: "65e8a39c-9da3-4f2c-9f31-1e7aee1f2156"
})
```

```elixir
Leader.current_state(symbol)
|> Map.get(:workflows_finished)
|> Enum.map(fn x ->
  %{workflow_id: x.workflow_id, log_file: x.log_file, aks: x.step_context.aks}
end)
```

<!-- livebook:{"branch_parent_index":1} -->

## Overwrite kubectl config from worker

```elixir
leader_state = Leader.current_state(symbol)
worker_pid = leader_state.worker_registry |> Map.get("worker_mhw2fl")
Worker.worker_state(worker_pid)
```

<!-- livebook:{"branch_parent_index":1} -->

## Execute arbitary kubectl command

```elixir
{:ok, worker_pid} = Worker.Leader.get_worker_by_name(symbol, "worker1")
state = Worker.worker_state(worker_pid)

state.step_context
|> Map.merge(%{})
|> Steps.Acstor.Replication.test_kubectl_cmd("kubectl get pods")
```

<!-- livebook:{"branch_parent_index":1} -->

## Execute arbitary az command

```elixir
{:ok, worker_pid} = Worker.Leader.start_new_worker_with_state()(symbol, "worker_mhw2fl")
state = Worker.worker_state(worker_pid)

state.step_context
|> Map.merge(%{})
|> Steps.Acstor.Replication.test_az_cmd(
  "az group delete --name acstorbyzhaowei-bf9yc6 --yes --no-wait"
)
```

## Simulate multiple workflow running

```elixir
# Settings 
symbol = "nvme"

alias Worker.Leader
alias Steps.Acstor.WorkflowConfig
```

<!-- livebook:{"branch_parent_index":6} -->

## Control Scneario execution

```elixir
Workflow.stop_scenario(symbol)
Workflow.start_scenario(symbol)
```

```elixir
Kino.Process.render_sup_tree(DynamicSymbolSupervisor)
```

<!-- livebook:{"branch_parent_index":6} -->

## Control Leader

```elixir
Leader.toggle_symbol_execution(symbol)
```

```elixir
workflow_definitions =
  1..1
  |> Enum.to_list()
  |> Enum.map(fn _ ->
    WorkflowConfig.dummy_workflow_for_testing_skip_failed()
  end)

Leader.add_workflows_for_symbol(%{
  symbol: symbol,
  workflows_definition: workflow_definitions
})
```

```elixir
Leader.schedule_workflows(symbol)
```

```elixir
Leader.execute_workflows_for_symbol(symbol)
```

```elixir
leader_state = Leader.current_state(symbol)
```

```elixir
leader_state = Leader.current_state(symbol)
leader_state |> Map.get(:workflows_todo) |> length
```

```elixir
leader_state = Leader.current_state(symbol)
leader_state |> Map.get(:workflows_finished) |> length
```

```elixir
leader_state.worker_registry
|> Enum.map(fn {worker_name, worker_pid} ->
  %{worker_name: worker_name, worker_state: Worker.worker_state(worker_pid)}
end)
```

```elixir
:infinite > 0
```

## Backup Info

```elixir
failed_workflow = %{
  log_file: "/tmp/logs/2023-9-6_12-37-25/ga2ptx/log.txt",
  step_context: %{
    aks: "acstorbyzhaowei-ga2ptx",
    disk_type: "azure_disk",
    kubectl_config: "/tmp/logs/2023-9-6_12-37-25/ga2ptx/kubectl_config",
    log_file: "/tmp/logs/2023-9-6_12-37-25/ga2ptx/log.txt",
    managed_id: "eee3db25-e3f3-4bb1-8fc3-cda218e6543d",
    node_rg: "MC_acstorbyzhaowei-ga2ptx_acstorbyzhaowei-ga2ptx_eastus",
    prefix: "acstorbyzhaowei",
    region: "eastus",
    rg: "acstorbyzhaowei-ga2ptx",
    session_dir: "/tmp/logs/2023-9-6_12-37-25/ga2ptx",
    sub: "d20d4862-d44e-429d-bcd7-fe71a331a8b8",
    suffix: "ga2ptx",
    symbol: "azure_disk_replication",
    vm_sku: "Standard_D4s_v3"
  },
  steps: [
    %{
      retry_count: 0,
      step_id: "5439e0d0-10e3-4456-abc5-644a22030ae9",
      step_index: 0,
      step_status: "succeed",
      which_function: "az_login_using_sp",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "b94f5a52-f5ab-4a0e-baf2-d67aae8ddf9a",
      step_index: 1,
      step_status: "succeed",
      which_function: "az_set_subscription",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "40585492-bf60-47a5-97e0-9463386495f9",
      step_index: 2,
      step_status: "succeed",
      which_function: "az_create_resource_group",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "06a9ddf4-a526-4eb9-964d-1414e031fd7d",
      step_index: 3,
      step_status: "succeed",
      which_function: "az_create_aks_cluster",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "861a5d1b-96fd-48da-94e4-ada42032d423",
      step_index: 4,
      step_status: "succeed",
      which_function: "set_disk_type_to_azure_disk",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "de5e798a-822c-4178-8fce-4e31ce396d26",
      step_index: 5,
      step_status: "succeed",
      which_function: "az_add_node_pool",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "11034084-d569-4450-bb0b-fd31c7239fdb",
      step_index: 6,
      step_status: "succeed",
      which_function: "get_aks_config",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "6c6795e2-8bb5-476d-a880-b6fc464d502b",
      step_index: 7,
      step_status: "succeed",
      which_function: "kubectl_get_nodes",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "90078eda-ac03-44b6-82a0-ad196c8b660f",
      step_index: 8,
      step_status: "succeed",
      which_function: "kubectl_label_nodes",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "42a81d04-08bd-4137-82db-4ac435752773",
      step_index: 9,
      step_status: "succeed",
      which_function: "kubectl_show_nodes_label",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "c5258709-3937-4619-ac4e-ea56c2eed0a0",
      step_index: 10,
      step_status: "succeed",
      which_function: "az_check_managed_id",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "d858a7e7-734e-4fe7-80ac-d485a65fbebb",
      step_index: 11,
      step_status: "succeed",
      which_function: "az_check_node_resource_group",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "5e9aed81-d60a-47b7-b955-1c3716bd3ab1",
      step_index: 12,
      step_status: "succeed",
      which_function: "az_assign_contributor_role",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "7b4166ed-dd72-47d1-8cb9-ec618f29db6c",
      step_index: 13,
      step_status: "succeed",
      which_function: "install_acstor_addons",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "bd621d39-3394-45d8-b50d-c1a868efe22b",
      step_index: 14,
      step_status: "succeed",
      which_function: "config_acstor_replication",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "47252898-4505-4561-aa38-a4fcc24c8f86",
      step_index: 15,
      step_status: "failed",
      which_function: "create_storage_pool",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "9d19a4ec-4dc9-4ce5-99df-0f40c5cea73d",
      step_index: 16,
      step_status: "todo",
      which_function: "create_storage_class",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "7934436b-8a5f-49d1-ae1b-03e6aa510e5d",
      step_index: 17,
      step_status: "todo",
      which_function: "create_pvc",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "3bf596bb-ef1e-4e20-a088-f2f18e8e4e41",
      step_index: 18,
      step_status: "todo",
      which_function: "get_current_nodes",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "cf4f5ac9-7a6a-4337-851b-9db114a809b7",
      step_index: 19,
      step_status: "todo",
      which_function: "label_nodes_with_labels",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "e321a2c1-8d17-497f-8dc7-3effa0c597a0",
      step_index: 20,
      step_status: "todo",
      which_function: "check_labeled_noded",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "422d130e-4d44-4041-8b98-9ed23cc28c79",
      step_index: 21,
      step_status: "todo",
      which_function: "create_pod_on_some_node",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "a03c52e8-c79a-436f-a5c1-5b6af3c01191",
      step_index: 22,
      step_status: "todo",
      which_function: "kubectl_get_pods",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "1b4b6eed-e1d1-41c8-8600-d855c26a3fa2",
      step_index: 23,
      step_status: "todo",
      which_function: "run_fio",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "cb88dd50-6e22-4bd9-95ae-21068d7b5488",
      step_index: 24,
      step_status: "todo",
      which_function: "get_acstor_api_value",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "1cd47f5b-ec17-40b7-b0cb-932db2c29b34",
      step_index: 25,
      step_status: "todo",
      which_function: "small_sleep",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "c4e7b84f-70a7-4915-ac60-72b446e7f2ef",
      step_index: 26,
      step_status: "todo",
      which_function: "forward_acstor_api_pod_to_host",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "633ec12f-5d41-49b6-b8ed-d13d393dbab3",
      step_index: 27,
      step_status: "todo",
      which_function: "get_replication_info",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "69efaa3a-aad2-4317-950f-f36735bcd352",
      step_index: 28,
      step_status: "todo",
      which_function: "get_xfs_disk_pools_used_by_pod",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "18227eb5-ac96-4bfa-bd61-7f75b16f808e",
      step_index: 29,
      step_status: "todo",
      which_function: "check_the_replication",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "e8677796-20a0-47b5-b268-9c811910c855",
      step_index: 30,
      step_status: "todo",
      which_function: "list_the_io_engine_pods",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "84d35446-12c8-4e12-a619-7a286a6f3aeb",
      step_index: 31,
      step_status: "todo",
      which_function: "run_mdf_xfs_disk_pools_used_by_pod",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "edce0e0c-31cc-4a5b-810e-b703d459cc59",
      step_index: 32,
      step_status: "todo",
      which_function: "unlabel_not_used_node",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "0075b0f2-3944-43b7-b4ed-5f2282b310bd",
      step_index: 33,
      step_status: "todo",
      which_function: "verify_unlabel_result",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "fa7c4775-abe0-490f-8e6d-8684fbf6dafa",
      step_index: 34,
      step_status: "todo",
      which_function: "big_sleep",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "f592ebb6-821a-4665-8ca3-a26d813ac21b",
      step_index: 35,
      step_status: "todo",
      which_function: "label_node_back_with_acstor",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "d43c7de8-78e4-4d11-a963-a0c16d9c9411",
      step_index: 36,
      step_status: "todo",
      which_function: "big_sleep",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "39e04bf5-ef56-4f4a-b7f3-30e5ac8b87f0",
      step_index: 37,
      step_status: "todo",
      which_function: "verify_rebuilding_state",
      which_module: "Steps.Acstor.Replication"
    },
    %{
      retry_count: 0,
      step_id: "ee21ad1a-3e07-42af-9b45-2d7ea66a2494",
      step_index: 38,
      step_status: "todo",
      which_function: "az_delete_rg",
      which_module: "Steps.Acstor.Replication"
    }
  ],
  workflow_id: "65e8a39c-9da3-4f2c-9f31-1e7aee1f2156",
  workflow_status: "failed"
}
```
