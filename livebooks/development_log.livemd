# Development Log

## Introduction

This livebook is used to records down the development progress of workflow-stack project.

<!-- livebook:{"branch_parent_index":0} -->

## 1. Postgresql for local development

For local dev, this app need postgresql. \
We will use postgresql from docker container for best practise.

<!-- livebook:{"break_markdown":true} -->

### Adding docker to project

In the main directory of our project create a file called `docker-compose.yml` and fill it with the below details:

```yaml
version: "3.2"
services:
  postgres:
    image: postgres:latest
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: workflow_dev
    volumes:
      - ../postgres-data:/var/lib/postgresql/data
```

We can now start the service using `docker-compose`:

```sh
docker-compose up -d
```

<!-- livebook:{"break_markdown":true} -->

We could validate it works by `docker ps`:

```
CONTAINER ID   IMAGE                                 COMMAND                  CREATED          STATUS          PORTS                                       NAMES
8dd96d941c7f   postgres:latest                       "docker-entrypoint.sâ€¦"   3 minutes ago    Up 3 minutes    0.0.0.0:5432->5432/tcp, :::5432->5432/tcp   workflow_umbrella_postgres_1
```

<!-- livebook:{"break_markdown":true} -->

### Start our umbrella project

```sh
iex --name myapp@localhost --cookie some_token -S mix
```

<!-- livebook:{"break_markdown":true} -->

### Troubleshootings

* Error when `docker-compose up -d`, shows \
  docker.credentials.errors.InitializationError: docker-credential-desktop.exe not installed or not available in PATH

  Solution:

  * `vi ~/.docker/config.json`
  * Change `credsStore` to `credStore`.

  After the modification,

  ```sh
  zw@zwpdbh:~/code/elixir_programming/workflow_umbrella$ cat ~/.docker/config.json
  {
    "credStore": "desktop.exe"
  }
  ```

<!-- livebook:{"branch_parent_index":0} -->

## 2. Use Livebook as super REPL

Let's use Livebook from container to connect to the project we just started from section 1.

### Start Livebook using Container image

```sh
docker run \
--network=host \
-e LIVEBOOK_DISTRIBUTION=name \
-e LIVEBOOK_COOKIE=some_token \
-e LIVEBOOK_NODE=livebook@localhost \
-u $(id -u):$(id -g) \
-v $(pwd):/data \
ghcr.io/livebook-dev/livebook:0.8.1
```

* `--network` specify the docker container we run use [Host network driver](https://docs.docker.com/network/drivers/host/).

* Those LIVEBOOK options are from [Livebook README](https://github.com/livebook-dev/livebook).

* Tag `0.8.1` from Livebook image support OTP25.

* If succeed, it should oupt something like:

  ```sh
  [Livebook] Application running at http://0.0.0.0:8080/?token=gwc234cmrxsfnqkaeeu6hv7wjhg3qe2g
  ```

For more details, check section one in `README.md`  located in the roote of the project.

<!-- livebook:{"break_markdown":true} -->

Let's execute some code from remote node.

```elixir
# Check the exported functions from WorkflowWeb module.
WorkflowWeb.module_info(:exports)
```

<!-- livebook:{"branch_parent_index":0} -->

## 3. Design

### Thinking about context

Contexts are dedicated modules that expose and group related functionality.

By giving modules that expose and group related functionality the name contexts, we help developers identify these patterns and talk about them. At the end of the day, contexts are just modules, as are your controllers, views, etc.

In Phoenix, contexts often encapsulate data access and data validation. They often talk to a database or APIs. Overall, think of them as boundaries to decouple and isolate parts of your application. Let's use these ideas to build out our web application.

<!-- livebook:{"break_markdown":true} -->

### Objective

<!-- livebook:{"break_markdown":true} -->

#### Relative components

* A `Worker`
  * A worker is a `GenServer` process.
* A `Step` is a pure function executed by a worker.
* A `Workflow` is consisted of a series of steps. 
  * It is the event a worker need to process.
  * Each step dependents on the execution of previous one.
* A `Scenario` is a group of `Workflows`.
  * Each execution of `Workflow` is independent of each other.
  * In other words, the `Workflow`s with a common topic/tag is a scenario.
* A `Streamer` is a service broadcast `Workflows`.

<!-- livebook:{"break_markdown":true} -->

#### Introduction - architectural design

How components connected?

* `Streamer` broadcast `Workflows` with multiple topics.
* Three components
  * A `Worker.Leader` could subscribe only one topic
    * It keep monitoring and save each worker's state.
    * Assign a workload to a worker.
  * A `Worker.DynamicWorkerSuperivor` - because we need to start workers using `DynamicSupervisor` dynamically.
  * Multiple `Worker`s to execute `Workload`s distributed to them.
* For each scenario(symbol), we will need above 3 components.
  * To effectiviely initialize them, we will add `SymbolSupervisor`, it will start both `Worker.Leader` and `Worker.DynamicWorkerSupervisor`
* Each `SymbolSupervisor` is started from `DynamicSymbolSupervisor`
* `DynamicSymbolSupervisor` is started from `Workflow.Application` which is started by `Workflow` application.

Summary:

* `Workflow.Application` is registered on `Workflow` application and started automatically when umbrella project starts.
* Inside `Workflow.Application` it starts a dynamic supervisor `DynamicSymbolSupervisor`.
* For each different symbol, `DynamicSymbolSupervisor` start a `SymbolSupervisor-#{symbol}` dynamically.
* Inside `SymbolSupervisor`, it defines how to start: `Worker.Leader` + `Worker.DynamicWorkerSupervisor`
* Finally, `Worker.Leader` use `Worker.DynamicWorkerSupervisor` to start and manage multiple `Worker`.

<!-- livebook:{"branch_parent_index":0} -->

## 4. Setup the Supervision Tree

### Objectives

* Create supervision tree to support multiple symbols (scenarios).

<!-- livebook:{"break_markdown":true} -->

In application `Workflow`

* Edit `mix.exs` file, specify the module which defines our application

  ```elixir
  def application do
    [
      mod: {Workflow.Application, []},
      extra_applications: [:logger, :runtime_tools]
    ]
  end
  ```

* Edit `Workflow.Application` module

  ```elixir
    defmodule Workflow.Application do
      # See https://hexdocs.pm/elixir/Application.html
      # for more information on OTP Applications
      @moduledoc false

      use Application

      @impl true
      def start(_type, _args) do
        children = [
          # other childrens
          # ... 
          {DynamicSupervisor, name: DynamicSymbolSupervisor}
        ]

        Supervisor.start_link(children, strategy: :one_for_one, name: WorkflowApp.Supervisor)
      end
    end
  ```

  * Implement `application` behaviour.
  * Add the child process we want to supervise.
  * Start the application supervisor with a name: `WorkflowApp.Supervisor`.

<!-- livebook:{"break_markdown":true} -->

Now, we could render the supervision tree after `Workflow` application is started.

```elixir
# Render supervision tree
# where "WorkflowApp.Supervisor" is the name we specified in "Workflow.Application"
Kino.Process.render_sup_tree(WorkflowApp.Supervisor)
```

### Start a scenario

A scenario is started by starting the corresponding `Supervisor-#{symbol}` from `DynamicSymbolSupervisor`.

```elixir
Workflow.start_scenario("scenario_02")
```

### Stop a scenario

<!-- livebook:{"break_markdown":true} -->

How to stop a scenario and stop all its children and children's children? \
We do so by terminate `SymbolSupervisor-#{symbol}` from the `DynamicSymbolSupervisor`

```elixir
scenario_sup_pid = Process.whereis(:"Elixir.SymbolSupervisor-scenario_02")
DynamicSupervisor.terminate_child(DynamicSymbolSupervisor, scenario_sup_pid)
```

```elixir
# Check all the children for a DynamicSupervisor.
DynamicSupervisor.which_children(DynamicSymbolSupervisor)
```

<!-- livebook:{"branch_parent_index":0} -->

## (Optional) Troubleshooting section 4

To see the supervision tree for a sencario, we need to first start a scenario.

```elixir
SymbolSupervisor.start_link("scenario_01")
```

Problem 01: Could not start workers when `SymbolSupervisor.start_link("scenario_01")`.

```text
[error] GenServer :"Elixir.Worker.Leader-scenario_01" terminating
** (stop) exited in: GenServer.call(:"DynamicWorkerSupervisor-", {:start_child, {{Worker, :start_link, [%Worker.State{symbol: nil, status: :ready, current_step: nil, workload_history: [], context: %{}}]}, :temporary, 5000, :worker, [Worker]}}, :infinity)
    ** (EXIT) no process: the process is not alive or there's no process currently associated with the given name, possibly because its application isn't started
    (elixir 1.14.3) lib/gen_server.ex:1027: GenServer.call/3
    (workflow 0.1.0) lib/worker/leader.ex:25: anonymous fn/3 in Worker.Leader.handle_continue/2
    (elixir 1.14.3) lib/enum.ex:4299: Enum.reduce_range/5
    (workflow 0.1.0) lib/worker/leader.ex:25: Worker.Leader.handle_continue/2
    (stdlib 4.3) gen_server.erl:1123: :gen_server.try_dispatch/4
    (stdlib 4.3) gen_server.erl:865: :gen_server.loop/7
    (stdlib 4.3) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Last message: {:continue, :start_worker}
```

The error happended from `Worker.Leader`'s callback `handle_continue`. Inside of it: \

* fetch global settings for one symbol (a scenario)
* initialize a fresh worker state
* use the fresh worker state to start multiple workers

The error happended because we forget to update the symbol into the fresh worker state. \
By default, the default symbol for a worker state is `nil`. However, we need to update it to the symbol we used in setting.

Solution

<!-- livebook:{"force_markdown":true} -->

```elixir
struct(Worker.State, settings)
```

<!-- livebook:{"break_markdown":true} -->

Problem 02: The started trio part for a symbol is not in application supervision tree.

```elixir
# Our DynamicSymbolSupervisor has no children
Supervisor.which_children(DynamicSymbolSupervisor)
```

However, a "SymbolSupervisor-#{symbol}" is created and along with its children.

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule SymbolSupervisor do
  use Supervisor
  require Logger

  def start_link(symbol) do
    Supervisor.start_link(__MODULE__, symbol, name: :"#{__MODULE__}-#{symbol}")
  end
  # ...
end
```

```elixir
# Notice the name of the process is prefixed by `Elixir`
Supervisor.which_children(:"Elixir.SymbolSupervisor-scenario_01")
```

```elixir
Kino.Process.render_sup_tree(:"Elixir.SymbolSupervisor-scenario_01")
```

Solutin:

* We shouldn't call `SymbolSupervisor.start_link("scenario_01")` directly.
* We need to call it while specifying `DynamicSymbolSupervisor` is the `DynamicSupervisor` of

<!-- livebook:{"break_markdown":true} -->

So, it is better to create a interface function in `Workflow` module for this purpose.

<!-- livebook:{"force_markdown":true} -->

```elixir
defmodule Workflow do
  @moduledoc """
  Workflow keeps the contexts that define your domain
  and business logic.

  Contexts are also responsible for managing your data, regardless
  if it comes from the database, an external API or others.
  """
  def start_scenario(symbol) do
    {:ok, _pid} =
      DynamicSupervisor.start_child(
        DynamicSymbolSupervisor,
        {SymbolSupervisor, symbol}
      )
  end
end
```

```elixir
Workflow.start_scenario("scenario_02")
```

```elixir
Kino.Process.render_sup_tree(DynamicSymbolSupervisor)
```
